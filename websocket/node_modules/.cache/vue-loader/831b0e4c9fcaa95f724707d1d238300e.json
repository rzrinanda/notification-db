{"remainingRequest":"/home/usr/training/day8/exercise/websocket/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/usr/training/day8/exercise/websocket/src/App.vue?vue&type=style&index=0&id=7ba5bd90&scoped=true&lang=css&","dependencies":[{"path":"/home/usr/training/day8/exercise/websocket/src/App.vue","mtime":1576657787017},{"path":"/home/usr/training/day8/exercise/websocket/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/usr/training/day8/exercise/websocket/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/usr/training/day8/exercise/websocket/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/usr/training/day8/exercise/websocket/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/usr/training/day8/exercise/websocket/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRhaW5lciB7CiAgbWFyZ2luOiBhdXRvOwogIHdpZHRoOiA4MDBweDsKfQouZmxleCB7CiAgZGlzcGxheTogZmxleDsKfQouanVzdGlmeS1iZXR3ZWVuIHsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"flex justify-between\">\n      <div>\n        <h1>Send Notification</h1>\n\n        <!-- <chat-form /> -->\n        <form method=\"POST\" @submit.prevent=\"sendMessage\">\n          <p>\n            Me\n            <input type=\"text\" v-model=\"me\" required />\n          </p>\n          <p>\n            To\n            <input type=\"text\" v-model=\"to\" required />\n            <button type=\"button\" @click=\"privateMessage\">Private Message</button>\n          </p>\n          <p>\n            Message\n            <input type=\"text\" v-model=\"message\" required />\n          </p>\n\n          <button type=\"submit\">Public Message</button>\n        </form>\n        <ul>\n          <li v-for=\"(msg, i) in incomingMessages\" :key=\"i\">\n            <!-- [{{ msg.date }}]   -->\n            {{ msg.name }} :\n            {{ msg.message }}\n          </li>\n        </ul>\n        <ul>\n          <li v-for=\"(msg, i) in incomingPrivateMessages\" :key=\"i\">\n            <!-- [{{ msg.date }}]   -->\n            {{ msg.name }} :\n            {{ msg.message }}\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Notyf } from \"notyf\";\nimport \"notyf/notyf.min.css\";\nimport ChatForm from \"./components/ChatForm\";\nimport axios from \"axios\";\n\nexport default {\n  component: {\n    ChatForm\n  },\n  data: () => ({\n    notifier: new Notyf(),\n    me: \"person1\",\n    to: \"person2\",\n    message: \"Hello\",\n    incomingMessages: [],\n    incomingPrivateMessages: [],\n    connection: null\n  }),\n\n  mounted() {\n    this.registerWS();\n  },\n\n  methods: {\n    sendMessage() {\n      const data = JSON.stringify({\n        private: false,\n        from: this.me,\n        to: this.to,\n        message: this.message\n      });\n      const form = {\n        name: this.me,\n        to: this.to,\n        message: this.message,\n        date: new Date()\n      }\n\n      this.connection.send(data);\n      const response = axios.post(\"chats/insert\", form);\n      console.log(response)\n    },\n\n    privateMessage() {\n      const data = JSON.stringify({\n        private: true,\n        from: this.me,\n        to: this.to,\n        message: this.message\n      });\n\n      const payload = {\n        name: this.me,\n        date: new Date().toISOString(),\n        message: this.message\n      };\n\n      this.incomingPrivateMessages.push(payload);\n\n      this.connection.send(data);\n      const response = axios.post(\"chats/insert\", form);\n      console.log(response)\n    },\n\n    registerWS() {\n      const url = \"ws://localhost:8001\";\n      this.connection = new WebSocket(url);\n\n      this.connection.onopen = event => {\n        console.log(\"We are connected\", event);\n      };\n\n      this.connection.onerror = error => {\n        console.log(`WebSocket error: ${error}`);\n      };\n\n      this.connection.onmessage = event => {\n        const data = JSON.parse(event.data);\n\n        console.log(data);\n\n        if (data.private && data.to === this.me) {\n          const payload = {\n            name: data.from,\n            date: new Date().toISOString(),\n            message: data.message\n          };\n\n          this.incomingPrivateMessages.push(payload);\n\n          this.notifier.success(data.message);\n        } else if (!data.private) {\n          const payload = {\n            name: data.from,\n            date: new Date().toISOString(),\n            message: data.message\n          };\n\n          this.incomingMessages.push(payload);\n\n          this.notifier.success(data.message);\n        }\n      };\n    }\n  }\n};\n</script>\n\n<style scoped>\n.container {\n  margin: auto;\n  width: 800px;\n}\n.flex {\n  display: flex;\n}\n.justify-between {\n  justify-content: space-between;\n}\n</style>\n"]}]}